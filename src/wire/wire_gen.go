// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"first-project/src/application"
	"first-project/src/application/communication/emailService"
	"first-project/src/application/interfaces"
	"first-project/src/bootstrap"
	"first-project/src/controller/v1/category"
	"first-project/src/controller/v1/chat"
	"first-project/src/controller/v1/comment"
	"first-project/src/controller/v1/event"
	"first-project/src/controller/v1/journal"
	"first-project/src/controller/v1/news"
	"first-project/src/controller/v1/podcast"
	"first-project/src/controller/v1/user"
	"first-project/src/middleware/Authentication"
	"first-project/src/middleware/exceptions"
	"first-project/src/middleware/i18n"
	"first-project/src/middleware/rateLimit"
	"first-project/src/middleware/websocket"
	"first-project/src/repository/database"
	"first-project/src/repository/database/interfaces"
	"first-project/src/repository/redis"
	"first-project/src/websocket"
	"github.com/google/wire"
	"github.com/redis/go-redis/v9"
	"gorm.io/gorm"
)

// Injectors from wire.go:

func InitializeApplication(container *bootstrap.Di, db *gorm.DB, rdb *redis.Client, hub *websocket.Hub) (*Application, error) {
	constants := ProvideConstants(container)
	commentRepository := repository_database.NewCommentRepository()
	userRepository := repository_database.NewUserRepository()
	otpService := application.NewOTPService()
	s3 := ProvideStorage(container)
	s3Service := application.NewS3Service(constants, s3)
	userService := application.NewUserService(constants, userRepository, otpService, s3Service, db)
	commentService := application.NewCommentService(constants, commentRepository, userService, db)
	adminCommentController := controller_v1_comment.NewAdminCommentController(constants, commentService)
	categoryRepository := repository_database.NewCategoryRepository()
	categoryService := application.NewCategoryService(constants, categoryRepository, db)
	eventRepository := repository_database.NewEventRepository()
	purchaseRepository := repository_database.NewPurchaseRepository()
	eventService := application.NewEventService(constants, s3Service, categoryService, eventRepository, commentRepository, purchaseRepository, db)
	emailInfo := ProvideEmailInfo(container)
	emailService := application_communication.NewEmailService(emailInfo)
	adminEventController := controller_v1_event.NewAdminEventController(constants, eventService, emailService)
	journalRepository := repository_database.NewJournalRepository()
	journalService := application.NewJournalService(constants, s3Service, userService, journalRepository, db)
	adminJournalController := controller_v1_journal.NewAdminJournalController(constants, journalService)
	newsRepository := repository_database.NewNewsRepository()
	newsService := application.NewNewsService(constants, s3Service, categoryService, commentRepository, newsRepository, userService, db)
	adminNewsController := controller_v1_news.NewAdminNewsController(constants, newsService)
	podcastRepository := repository_database.NewPodcastRepository()
	podcastService := application.NewPodcastService(constants, s3Service, categoryService, podcastRepository, commentRepository, userService, db)
	adminPodcastController := controller_v1_podcast.NewAdminPodcastController(constants, podcastService)
	adminUserController := controller_v1_user.NewAdminUserController(constants, userService)
	adminControllers := &AdminControllers{
		CommentController: adminCommentController,
		EventController:   adminEventController,
		JournalController: adminJournalController,
		NewsController:    adminNewsController,
		PodcastController: adminPodcastController,
		UserController:    adminUserController,
	}
	chatRepository := repository_database.NewChatRepository()
	chatService := application.NewChatService(constants, userService, chatRepository, db)
	jwtToken := application.NewJWTToken()
	customerChatController := controller_v1_chat.NewCustomerChatController(constants, chatService, jwtToken, hub)
	customerCommentController := controller_v1_comment.NewCustomerCommentController(constants, commentService)
	customerEventController := controller_v1_event.NewCustomerEventController(constants, eventService, emailService)
	customerPodcastController := controller_v1_podcast.NewCustomerPodcastController(constants, podcastService)
	customerUserController := controller_v1_user.NewCustomerUserController(constants, userService)
	customerControllers := &CustomerControllers{
		ChatController:    customerChatController,
		CommentController: customerCommentController,
		EventController:   customerEventController,
		PodcastController: customerPodcastController,
		UserController:    customerUserController,
	}
	generalCategoryController := controller_v1_category.NewGeneralCategoryController(categoryService)
	generalCommentController := controller_v1_comment.NewGeneralCommentController(constants, commentService)
	generalEventController := controller_v1_event.NewGeneralEventController(constants, eventService, emailService)
	generalJournalController := controller_v1_journal.NewGeneralJournalController(constants, journalService)
	generalNewsController := controller_v1_news.NewGeneralNewsController(constants, newsService)
	generalPodcastController := controller_v1_podcast.NewGeneralPodcastController(constants, podcastService)
	userCache := repository_cache.NewUserCache(db, constants, rdb, userRepository)
	generalUserController := controller_v1_user.NewGeneralUserController(constants, userService, emailService, userCache, otpService, jwtToken)
	generalControllers := &GeneralControllers{
		CategoryController: generalCategoryController,
		CommentController:  generalCommentController,
		EventController:    generalEventController,
		JournalController:  generalJournalController,
		NewsController:     generalNewsController,
		PodcastController:  generalPodcastController,
		UserController:     generalUserController,
	}
	authMiddleware := middleware_authentication.NewAuthMiddleware(constants, userRepository, jwtToken, db)
	recoveryMiddleware := middleware_exceptions.NewRecovery(constants)
	localizationMiddleware := middleware_i18n.NewLocalization(constants)
	rateLimitMiddleware := middleware_rate_limit.NewRateLimit()
	websocketMiddleware := middleware_websocket.NewWebsocketMiddleware(constants)
	middlewares := &Middlewares{
		Auth:         authMiddleware,
		Recovery:     recoveryMiddleware,
		Localization: localizationMiddleware,
		RateLimit:    rateLimitMiddleware,
		Websocket:    websocketMiddleware,
	}
	wireApplication := &Application{
		AdminControllers:    adminControllers,
		CustomerControllers: customerControllers,
		GeneralControllers:  generalControllers,
		Middlewares:         middlewares,
	}
	return wireApplication, nil
}

// wire.go:

var DatabaseProviderSet = wire.NewSet(repository_database.NewCategoryRepository, repository_database.NewChatRepository, repository_database.NewCommentRepository, repository_database.NewEventRepository, repository_database.NewJournalRepository, repository_database.NewNewsRepository, repository_database.NewPodcastRepository, repository_database.NewPurchaseRepository, repository_database.NewUserRepository, wire.Bind(new(repository_database_interfaces.CategoryRepository), new(*repository_database.CategoryRepository)), wire.Bind(new(repository_database_interfaces.ChatRepository), new(*repository_database.ChatRepository)), wire.Bind(new(repository_database_interfaces.CommentRepository), new(*repository_database.CommentRepository)), wire.Bind(new(repository_database_interfaces.EventRepository), new(*repository_database.EventRepository)), wire.Bind(new(repository_database_interfaces.JournalRepository), new(*repository_database.JournalRepository)), wire.Bind(new(repository_database_interfaces.NewsRepository), new(*repository_database.NewsRepository)), wire.Bind(new(repository_database_interfaces.PodcastRepository), new(*repository_database.PodcastRepository)), wire.Bind(new(repository_database_interfaces.PurchaseRepository), new(*repository_database.PurchaseRepository)), wire.Bind(new(repository_database_interfaces.UserRepository), new(*repository_database.UserRepository)))

var RedisProviderSet = wire.NewSet(repository_cache.NewUserCache)

// no cron here!
var ServiceProviderSet = wire.NewSet(application.NewS3Service, application.NewCategoryService, application.NewChatService, application.NewCommentService, application.NewEventService, application.NewJournalService, application.NewJWTToken, application.NewNewsService, application.NewOTPService, application.NewPodcastService, application.NewUserService, application_communication.NewEmailService, wire.Bind(new(application_interfaces.S3Service), new(*application.S3Service)), wire.Bind(new(application_interfaces.CategoryService), new(*application.CategoryService)), wire.Bind(new(application_interfaces.ChatService), new(*application.ChatService)), wire.Bind(new(application_interfaces.CommentService), new(*application.CommentService)), wire.Bind(new(application_interfaces.EventService), new(*application.EventService)), wire.Bind(new(application_interfaces.JournalService), new(*application.JournalService)), wire.Bind(new(application_interfaces.JWTToken), new(*application.JWTToken)), wire.Bind(new(application_interfaces.NewsService), new(*application.NewsService)), wire.Bind(new(application_interfaces.OTPService), new(*application.OTPService)), wire.Bind(new(application_interfaces.PodcastService), new(*application.PodcastService)), wire.Bind(new(application_interfaces.UserService), new(*application.UserService)), wire.Bind(new(application_interfaces.EmailService), new(*application_communication.EmailService)))

var AdminControllerProviderSet = wire.NewSet(controller_v1_comment.NewAdminCommentController, controller_v1_event.NewAdminEventController, controller_v1_journal.NewAdminJournalController, controller_v1_news.NewAdminNewsController, controller_v1_podcast.NewAdminPodcastController, controller_v1_user.NewAdminUserController, wire.Struct(new(AdminControllers), "*"))

var CustomerControllerProviderSet = wire.NewSet(controller_v1_chat.NewCustomerChatController, controller_v1_comment.NewCustomerCommentController, controller_v1_event.NewCustomerEventController, controller_v1_podcast.NewCustomerPodcastController, controller_v1_user.NewCustomerUserController, wire.Struct(new(CustomerControllers), "*"))

var GeneralControllerProviderSet = wire.NewSet(controller_v1_category.NewGeneralCategoryController, controller_v1_comment.NewGeneralCommentController, controller_v1_event.NewGeneralEventController, controller_v1_journal.NewGeneralJournalController, controller_v1_news.NewGeneralNewsController, controller_v1_podcast.NewGeneralPodcastController, controller_v1_user.NewGeneralUserController, wire.Struct(new(GeneralControllers), "*"))

var MiddlewareProviderSet = wire.NewSet(middleware_authentication.NewAuthMiddleware, middleware_exceptions.NewRecovery, middleware_i18n.NewLocalization, middleware_rate_limit.NewRateLimit, middleware_websocket.NewWebsocketMiddleware, wire.Struct(new(Middlewares), "*"))

func ProvideConstants(container *bootstrap.Di) *bootstrap.Constants {
	return container.Constants
}

func ProvideEmailInfo(container *bootstrap.Di) *bootstrap.EmailInfo {
	return &container.Env.Email
}

func ProvideStorage(container *bootstrap.Di) *bootstrap.S3 {
	return &container.Env.Storage
}

var ProviderSet = wire.NewSet(
	DatabaseProviderSet,
	RedisProviderSet,
	ServiceProviderSet,
	AdminControllerProviderSet,
	CustomerControllerProviderSet,
	GeneralControllerProviderSet,
	MiddlewareProviderSet,
)

type AdminControllers struct {
	CommentController *controller_v1_comment.AdminCommentController
	EventController   *controller_v1_event.AdminEventController
	JournalController *controller_v1_journal.AdminJournalController
	NewsController    *controller_v1_news.AdminNewsController
	PodcastController *controller_v1_podcast.AdminPodcastController
	UserController    *controller_v1_user.AdminUserController
}

type CustomerControllers struct {
	ChatController    *controller_v1_chat.CustomerChatController
	CommentController *controller_v1_comment.CustomerCommentController
	EventController   *controller_v1_event.CustomerEventController
	PodcastController *controller_v1_podcast.CustomerPodcastController
	UserController    *controller_v1_user.CustomerUserController
}

type GeneralControllers struct {
	CategoryController *controller_v1_category.GeneralCategoryController
	CommentController  *controller_v1_comment.GeneralCommentController
	EventController    *controller_v1_event.GeneralEventController
	JournalController  *controller_v1_journal.GeneralJournalController
	NewsController     *controller_v1_news.GeneralNewsController
	PodcastController  *controller_v1_podcast.GeneralPodcastController
	UserController     *controller_v1_user.GeneralUserController
}

type Middlewares struct {
	Auth         *middleware_authentication.AuthMiddleware
	Recovery     *middleware_exceptions.RecoveryMiddleware
	Localization *middleware_i18n.LocalizationMiddleware
	RateLimit    *middleware_rate_limit.RateLimitMiddleware
	Websocket    *middleware_websocket.WebsocketMiddleware
}

type Application struct {
	AdminControllers    *AdminControllers
	CustomerControllers *CustomerControllers
	GeneralControllers  *GeneralControllers
	Middlewares         *Middlewares
}
